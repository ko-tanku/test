# Enhanced Components Comprehensive Test Page
# Testing all enhanced features of the 4 extended components

#################################################
# 1. InteractiveFlowchart - SystemArchitectureViewer Tests
#################################################

# Basic Flowchart Mode Test
- component: 'interactive/InteractiveFlowchart'
  props:
    title: '基本フローチャート'
    mode: 'flowchart'
    interactive: true
    steps:
      - id: 'start'
        label: '開始'
        type: 'start'
        x: 50
        y: 10
        description: 'プロセス開始点'
      - id: 'process1'
        label: 'データ入力'
        type: 'process'
        x: 50
        y: 30
        description: 'ユーザーからのデータ入力'
      - id: 'decision1'
        label: '有効？'
        type: 'decision'
        x: 50
        y: 50
        description: 'データの妥当性チェック'
      - id: 'process2'
        label: '処理実行'
        type: 'process'
        x: 30
        y: 70
        description: 'データの処理実行'
      - id: 'error'
        label: 'エラー'
        type: 'end'
        x: 70
        y: 70
        description: 'エラー処理'
      - id: 'end'
        label: '終了'
        type: 'end'
        x: 50
        y: 90
        description: 'プロセス終了'
    connections:
      - from: 'start'
        to: 'process1'
      - from: 'process1'
        to: 'decision1'
      - from: 'decision1'
        to: 'process2'
        label: 'Yes'
      - from: 'decision1'
        to: 'error'
        label: 'No'
      - from: 'process2'
        to: 'end'
      - from: 'error'
        to: 'end'

# CPU Architecture Mode Test - YAML駆動レイアウト制御
- component: 'interactive/InteractiveFlowchart'
  props:
    title: 'CPUアーキテクチャ図'
    mode: 'architecture'
    interactive: true
    showLegend: true
    zoomEnabled: true
    # YAML駆動レイアウト制御
    layout:
      container:
        width: 900   # 幅を拡大
        height: 500  # 高さを拡大
      tooltip:
        width: 350   # ツールチップ幅拡大
        maxHeight: 250
        positioning: 'viewport-aware'
      legend:
        position: 'right'
        width: 180   # レジェンド幅拡大
        itemSpacing: 10
      nodes:
        spacing: 150  # ノード間隔拡大
    steps:
      - id: 'cpu'
        label: 'CPU Core'
        type: 'cpu_component'
        x: 50
        y: 30
        icon: '🧠'
        specs:
          'クロック周波数': '3.2GHz'
          'アーキテクチャ': 'x86-64'
          'コア数': '8'
          'スレッド数': '16'
        description: 'Central Processing Unit'
        technicalDetails:
          - 'ALU: 算術論理演算装置'
          - 'Control Unit: 制御装置'
          - 'Register File: レジスタ群'
          - 'Cache: L1/L2/L3キャッシュ'
      - id: 'memory'
        label: 'Main Memory'
        type: 'memory_block'
        x: 20
        y: 60
        icon: '💾'
        specs:
          '容量': '32GB'
          'タイプ': 'DDR4-3200'
          'チャンネル': 'Dual Channel'
          'レイテンシ': 'CL16'
        description: 'システムメインメモリ'
        technicalDetails:
          - 'DRAM: Dynamic Random Access Memory'
          - 'ECC: Error Correction Code対応'
          - 'Buffered: Registered DIMM'
      - id: 'cache'
        label: 'Cache'
        type: 'cpu_unit'
        x: 70
        y: 45
        icon: '⚡'
        specs:
          'L1キャッシュ': '32KB'
          'L2キャッシュ': '256KB'
          'L3キャッシュ': '16MB'
        description: 'キャッシュメモリ階層'
      - id: 'bus'
        label: 'System Bus'
        type: 'bus'
        x: 50
        y: 75
        icon: '🔌'
        specs:
          '幅': '64bit'
          '周波数': '1600MHz'
        description: 'システムバス'
    connections:
      - from: 'cpu'
        to: 'memory'
        type: 'data_bus'
        label: 'データバス'
      - from: 'cpu'
        to: 'cache'
        type: 'control_bus'
        label: '制御バス'
      - from: 'cpu'
        to: 'bus'
        type: 'address_bus'
        label: 'アドレスバス'
      - from: 'cache'
        to: 'memory'
        type: 'data_bus'
        label: 'メモリアクセス'

# Memory Map Mode Test
- component: 'interactive/InteractiveFlowchart'
  props:
    title: 'メモリマップ'
    mode: 'memory_map'
    interactive: true
    showLegend: true
    steps:
      - id: 'rom'
        label: 'ROM領域'
        type: 'memory_block'
        x: 30
        y: 20
        specs:
          'アドレス': '0x00000000-0x00FFFFFF'
          'サイズ': '16MB'
          'タイプ': 'Flash ROM'
        description: 'ブートローダーとファームウェア'
      - id: 'ram'
        label: 'RAM領域'
        type: 'memory_block'
        x: 30
        y: 40
        specs:
          'アドレス': '0x20000000-0x2FFFFFFF'
          'サイズ': '256MB'
          'タイプ': 'SRAM'
        description: '実行時データとスタック'
      - id: 'peripheral'
        label: '周辺機器領域'
        type: 'peripheral'
        x: 30
        y: 60
        specs:
          'アドレス': '0x40000000-0x5FFFFFFF'
          'サイズ': '512MB'
          'タイプ': 'Memory Mapped I/O'
        description: '周辺機器レジスタ'
      - id: 'external'
        label: '外部メモリ'
        type: 'memory_block'
        x: 30
        y: 80
        specs:
          'アドレス': '0x60000000-0xFFFFFFFF'
          'サイズ': '2.5GB'
          'タイプ': 'External Bus'
        description: '拡張メモリとデバイス'

#################################################
# 2. Timeline - DevelopmentProcessFlow Tests  
#################################################

# Basic Timeline Mode Test
- component: 'interactive/Timeline'
  props:
    orientation: 'vertical'
    interactive: true
    showProgress: false
    currentStep: 0
    mode: 'timeline'
    events:
      - title: 'プロジェクト企画'
        date: '2023-01-15'
        description: 'プロジェクトの企画と初期要件定義'
        details: '詳細な企画書作成と関係者との初期協議を実施'
        tags: ['企画', '要件定義']
      - title: 'チーム結成'
        date: '2023-02-01'
        description: 'プロジェクトチームの編成'
        details: 'エンジニア、デザイナー、PMを含む5名のチーム結成'
        tags: ['チーム', '体制']
      - title: 'プロトタイプ完成'
        date: '2023-04-30'
        description: '初期プロトタイプの完成'
        details: '基本機能を実装したMVPの完成とデモ実施'
        tags: ['開発', 'プロトタイプ']
      - title: 'ベータリリース'
        date: '2023-07-15'
        description: '限定ユーザー向けベータ版公開'
        details: '100名の限定ユーザーでの先行テスト開始'
        tags: ['リリース', 'テスト']

# Development Process Mode Test - V Model - YAML駆動レイアウト制御
- component: 'interactive/Timeline'
  props:
    orientation: 'vertical'
    interactive: true
    showProgress: true
    currentStep: 2
    mode: 'v_model'
    showDependencies: true
    phaseColors: true
    # YAML駆動レイアウト制御
    layout:
      timeline:
        eventSpacing: 140  # イベント間隔を拡大
        lineWidth: 4
        markerSize: 45
      events:
        contentWidth: 400  # コンテンツ幅を拡大
        contentPadding: 20
        headerHeight: 70
        detailsMaxHeight: 250  # 詳細表示高さを拡大
      dependencies:
        lineOffset: 50   # 依存関係線のオフセット調整
        arrowSize: 10
        horizontalSpacing: 250
      text:
        titleSize: '1.2rem'   # タイトルサイズ拡大
        descriptionSize: '1rem'
        metaSize: '0.85rem'
    events:
      - title: '要件定義'
        phase: 'requirements'
        type: 'milestone'
        description: 'ステークホルダーからの要求事項の明確化'
        duration: '3週間'
        deliverables:
          - '要件定義書'
          - '機能仕様書'
          - 'ユースケース図'
          - '非機能要件書'
        technicalNotes:
          - 'ステークホルダー分析の実施'
          - 'MoSCoW法による要件優先度付け'
          - 'プロトタイプによる要件検証'
        tags: ['要件', 'ドキュメント']
      - title: 'システム設計'
        phase: 'design'
        type: 'deliverable'
        description: 'システム全体のアーキテクチャ設計'
        duration: '4週間'
        deliverables:
          - 'システムアーキテクチャ図'
          - 'データベース設計書'
          - 'API仕様書'
          - 'セキュリティ設計書'
        technicalNotes:
          - 'マイクロサービスアーキテクチャの採用'
          - 'RESTful API設計原則の適用'
          - 'OAuth 2.0認証の実装'
        dependencies: [0]
        tags: ['設計', 'アーキテクチャ']
      - title: '詳細設計'
        phase: 'design'
        type: 'deliverable'
        description: '各モジュールの詳細設計'
        duration: '3週間'
        deliverables:
          - '詳細設計書'
          - 'クラス図'
          - 'シーケンス図'
          - 'データフロー図'
        technicalNotes:
          - 'オブジェクト指向設計の適用'
          - 'デザインパターンの活用'
          - 'コーディング規約の策定'
        dependencies: [1]
        tags: ['詳細設計', 'モジュール']
      - title: '実装・単体テスト'
        phase: 'implementation'
        type: 'deliverable'
        description: 'コード実装と単体テストの実施'
        duration: '8週間'
        deliverables:
          - 'ソースコード'
          - '単体テストコード'
          - 'コードレビュー記録'
          - 'テスト実行結果'
        technicalNotes:
          - 'TDD（テスト駆動開発）の実践'
          - 'CI/CDパイプラインの構築'
          - '静的解析ツールの導入'
        dependencies: [2]
        tags: ['実装', '単体テスト']
      - title: '結合テスト'
        phase: 'testing'
        type: 'milestone'
        description: 'モジュール間の結合テスト'
        duration: '3週間'
        deliverables:
          - '結合テスト仕様書'
          - 'テスト実行結果'
          - 'バグレポート'
          - '修正済みソースコード'
        technicalNotes:
          - 'APIテストの自動化'
          - 'データベーステストの実施'
          - 'パフォーマンステスト'
        dependencies: [3]
        tags: ['結合テスト', '品質保証']
      - title: 'システムテスト'
        phase: 'testing'
        type: 'milestone'
        description: 'システム全体のテスト'
        duration: '2週間'
        deliverables:
          - 'システムテスト仕様書'
          - 'テスト結果レポート'
          - '性能測定結果'
          - 'セキュリティテスト結果'
        technicalNotes:
          - 'E2Eテストの自動化'
          - '負荷テストの実施'
          - 'セキュリティ脆弱性検査'
        dependencies: [4]
        tags: ['システムテスト', '性能']
      - title: '受け入れテスト'
        phase: 'testing'
        type: 'milestone'
        description: 'ユーザー受け入れテスト'
        duration: '2週間'
        deliverables:
          - '受け入れテスト仕様書'
          - 'ユーザーテスト結果'
          - '操作マニュアル'
          - '受け入れ確認書'
        technicalNotes:
          - 'ユーザビリティテスト'
          - 'アクセシビリティチェック'
          - '運用手順書の検証'
        dependencies: [5]
        tags: ['受け入れテスト', 'ユーザー']
      - title: 'デプロイメント'
        phase: 'deployment'
        type: 'milestone'
        description: '本番環境へのデプロイ'
        duration: '1週間'
        deliverables:
          - 'デプロイメント手順書'
          - '運用マニュアル'
          - '監視設定'
          - 'バックアップ設定'
        technicalNotes:
          - 'Blue-Greenデプロイメント'
          - 'ロールバック手順の確認'
          - '監視・アラート設定'
        dependencies: [6]
        tags: ['デプロイ', '本番']

# Git Flow Mode Test
- component: 'interactive/Timeline'
  props:
    orientation: 'vertical'
    interactive: true
    mode: 'git_flow'
    showDependencies: false
    phaseColors: true
    events:
      - title: 'main: 初期リポジトリ作成'
        date: '2023-01-01'
        description: 'Gitリポジトリの初期化とmainブランチ作成'
        branch: 'main'
        action: 'commit'
        commits: 1
        details: 'README.mdとライセンスファイルの追加'
        technicalNotes:
          - 'Git Flow開発モデルの採用'
          - 'ブランチ保護ルールの設定'
          - 'コミットメッセージ規約の策定'
      - title: 'develop: 開発ブランチ作成'
        date: '2023-01-02'
        description: 'mainから開発用ブランチを分岐'
        branch: 'develop'
        action: 'branch'
        commits: 0
        details: '開発用の統合ブランチとして利用'
        dependencies: [0]
        technicalNotes:
          - 'develop = 開発中の最新状態'
          - 'feature branchの統合先'
      - title: 'feature/login: ログイン機能開発'
        date: '2023-01-15'
        description: 'ユーザーログイン機能の実装'
        branch: 'feature/login'
        action: 'branch'
        commits: 12
        details: 'OAuth2.0認証システムの実装'
        dependencies: [1]
        technicalNotes:
          - 'JWT トークンベース認証'
          - 'パスワードハッシュ化'
          - 'セッション管理'
      - title: 'develop: ログイン機能統合'
        date: '2023-01-28'
        description: 'feature/loginをdevelopにマージ'
        branch: 'develop'
        action: 'merge'
        commits: 12
        details: 'プルリクエスト経由でのマージ'
        dependencies: [2]
        technicalNotes:
          - 'コードレビューの実施'
          - 'CI/CDパイプライン通過確認'
      - title: 'feature/dashboard: ダッシュボード開発'
        date: '2023-02-01'
        description: 'ユーザーダッシュボードの実装'
        branch: 'feature/dashboard'
        action: 'branch'
        commits: 18
        details: 'React コンポーネントとAPI連携'
        dependencies: [3]
        technicalNotes:
          - 'React Hooks使用'
          - 'レスポンシブデザイン'
          - 'API データバインディング'
      - title: 'release/1.0.0: リリース準備'
        date: '2023-02-20'
        description: 'v1.0.0リリース準備ブランチ'
        branch: 'release/1.0.0'
        action: 'branch'
        commits: 5
        details: 'バージョン番号更新とドキュメント整備'
        dependencies: [4]
        technicalNotes:
          - 'バージョン番号の更新'
          - 'CHANGELOG.md作成'
          - '最終テスト実施'
      - title: 'main: v1.0.0 リリース'
        date: '2023-02-28'
        description: '正式版リリース'
        branch: 'main'
        action: 'merge'
        commits: 35
        details: 'タグ付きでのリリース'
        dependencies: [5]
        technicalNotes:
          - 'Git タグ作成 (v1.0.0)'
          - '本番環境デプロイ'
          - 'リリースノート公開'

#################################################
# 3. SimpleChart - Waveform Display Tests
#################################################

# Traditional Chart Types Test
- component: 'diagrams/SimpleChart'
  props:
    type: 'bar'
    title: '性能ベンチマーク比較'
    width: 500
    height: 300
    data:
      - label: 'CPU使用率'
        value: 75
      - label: 'メモリ使用率'
        value: 60
      - label: 'ディスクI/O'
        value: 40
      - label: 'ネットワーク'
        value: 25

- component: 'diagrams/SimpleChart'
  props:
    type: 'line'
    title: 'システムパフォーマンス推移'
    width: 600
    height: 250
    data:
      - label: '09:00'
        value: 20
      - label: '10:00'
        value: 35
      - label: '11:00'
        value: 55
      - label: '12:00'
        value: 80
      - label: '13:00'
        value: 70
      - label: '14:00'
        value: 45
      - label: '15:00'
        value: 30

# Analog Waveform Test
- component: 'diagrams/SimpleChart'
  props:
    type: 'waveform'
    title: 'サイン波信号 (1kHz)'
    width: 700
    height: 300
    timeUnit: 'ms'
    amplitude: 100
    showGrid: true
    animated: false
    data:
      - time: 0
        value: 0
      - time: 0.25
        value: 70.7
      - time: 0.5
        value: 100
      - time: 0.75
        value: 70.7
      - time: 1.0
        value: 0
      - time: 1.25
        value: -70.7
      - time: 1.5
        value: -100
      - time: 1.75
        value: -70.7
      - time: 2.0
        value: 0
      - time: 2.25
        value: 70.7
      - time: 2.5
        value: 100
      - time: 2.75
        value: 70.7
      - time: 3.0
        value: 0

# Digital Signal Test - I2C Communication - YAML駆動レイアウト制御
- component: 'diagrams/SimpleChart'
  props:
    type: 'digital'
    title: 'I2C通信プロトコル波形'
    timeUnit: 'μs'
    showGrid: true
    # YAML駆動レイアウト制御
    layout:
      chart:
        width: 900   # 幅を拡大
        height: 250  # 高さを拡大
        margin: { top: 40, right: 60, bottom: 50, left: 80 }
      digital:
        channelHeight: 80  # チャンネル高を拡大
        channelSpacing: 15 # チャンネル間隔を拡大
        signalWidth: 2
      text:
        titleSize: 18
        labelSize: 14
    data:
      - name: 'SCL (Clock)'
        data:
          - time: 0
            value: 1
          - time: 1
            value: 0
          - time: 2
            value: 1
          - time: 3
            value: 0
          - time: 4
            value: 1
          - time: 5
            value: 0
          - time: 6
            value: 1
          - time: 7
            value: 0
          - time: 8
            value: 1
        color: 'var(--ifm-color-primary)'
      - name: 'SDA (Data)'
        data:
          - time: 0
            value: 1
          - time: 1
            value: 1
          - time: 2
            value: 0
          - time: 3
            value: 1
          - time: 4
            value: 0
          - time: 5
            value: 1
          - time: 6
            value: 0
          - time: 7
            value: 0
          - time: 8
            value: 1
        color: 'var(--ifm-color-success)'

# SPI Communication Test
- component: 'diagrams/SimpleChart'
  props:
    type: 'digital'
    title: 'SPI通信プロトコル波形'
    width: 800
    height: 250
    timeUnit: 'ns'
    showGrid: true
    data:
      - name: 'SCLK'
        data:
          - time: 0
            value: 0
          - time: 100
            value: 1
          - time: 200
            value: 0
          - time: 300
            value: 1
          - time: 400
            value: 0
          - time: 500
            value: 1
          - time: 600
            value: 0
          - time: 700
            value: 1
          - time: 800
            value: 0
        color: 'var(--ifm-color-primary)'
      - name: 'MOSI'
        data:
          - time: 0
            value: 1
          - time: 100
            value: 1
          - time: 200
            value: 0
          - time: 300
            value: 1
          - time: 400
            value: 0
          - time: 500
            value: 1
          - time: 600
            value: 1
          - time: 700
            value: 0
          - time: 800
            value: 0
        color: 'var(--ifm-color-success)'
      - name: 'MISO'
        data:
          - time: 0
            value: 0
          - time: 100
            value: 1
          - time: 200
            value: 1
          - time: 300
            value: 0
          - time: 400
            value: 1
          - time: 500
            value: 0
          - time: 600
            value: 0
          - time: 700
            value: 1
          - time: 800
            value: 1
        color: 'var(--ifm-color-warning)'
      - name: 'CS'
        data:
          - time: 0
            value: 0
          - time: 50
            value: 0
          - time: 750
            value: 0
          - time: 800
            value: 1
        color: 'var(--ifm-color-danger)'

# Multi-channel Analog Test
- component: 'diagrams/SimpleChart'
  props:
    type: 'waveform'
    title: 'マルチチャンネル アナログ信号'
    width: 700
    height: 350
    timeUnit: 's'
    amplitude: 100
    showGrid: true
    channelColors:
      - 'var(--ifm-color-primary)'
      - 'var(--ifm-color-success)' 
      - 'var(--ifm-color-warning)'
    data:
      - name: 'Channel 1 (1Hz)'
        data:
          - time: 0
            value: 0
          - time: 0.5
            value: 100
          - time: 1.0
            value: 0
          - time: 1.5
            value: -100
          - time: 2.0
            value: 0
        color: 'var(--ifm-color-primary)'
      - name: 'Channel 2 (2Hz)'
        data:
          - time: 0
            value: 0
          - time: 0.25
            value: 80
          - time: 0.5
            value: 0
          - time: 0.75
            value: -80
          - time: 1.0
            value: 0
          - time: 1.25
            value: 80
          - time: 1.5
            value: 0
          - time: 1.75
            value: -80
          - time: 2.0
            value: 0
        color: 'var(--ifm-color-success)'
      - name: 'Channel 3 (0.5Hz)'
        data:
          - time: 0
            value: 60
          - time: 1.0
            value: -60
          - time: 2.0
            value: 60
        color: 'var(--ifm-color-warning)'

#################################################
# 4. DataFlowSimulator - Network Stack Tests
#################################################

# Basic Data Flow Test
- component: 'interactive/DataFlowSimulator'
  props:
    title: '基本データフロー'
    mode: 'dataflow'
    autoPlay: false
    speed: 1500
    nodes:
      - id: 'sensor'
        label: 'センサー'
        type: 'input'
        x: 20
        y: 50
        description: '温度センサーからのデータ取得'
      - id: 'mcu'
        label: 'マイコン'
        type: 'process'
        x: 50
        y: 50
        description: 'データ処理とフィルタリング'
      - id: 'display'
        label: 'ディスプレイ'
        type: 'output'
        x: 80
        y: 30
        description: '温度値表示'
      - id: 'logger'
        label: 'データロガー'
        type: 'output'
        x: 80
        y: 70
        description: 'データ記録装置'
    flows:
      - from: 'sensor'
        to: 'mcu'
        label: '温度データ'
      - from: 'mcu'
        to: 'display'
        label: '表示データ'
      - from: 'mcu'
        to: 'logger'
        label: 'ログデータ'

# OSI Reference Model Test - YAML駆動で詰まりを解消
- component: 'interactive/DataFlowSimulator'
  props:
    title: 'OSI参照モデル - HTTP通信 (簡略版)'
    mode: 'network_stack'
    showLayers: true
    protocolInfo: true
    autoPlay: false
    speed: 3000
    # YAML駆動レイアウト制御で構造を改善
    layout:
      container:
        height: 550  # 高さを調整
        width: '100%'
      layers:
        height: 110  # レイヤー高さを拡大
        spacing: 20  # レイヤー間隔を大幅拡大
        labelWidth: 150
      nodes:
        spacing: 300  # ノード間隔を大幅拡大
        defaultWidth: 140
        defaultHeight: 65
      protocolPanel:
        position: 'bottom-left'  # 左下に配置して被りを防ぐ
        width: 280
        maxHeight: 200
        offset: { x: 20, y: 20 }
    nodes:
      - id: 'app'
        label: 'アプリケーション'
        layer: 3
        protocol: 'HTTP'
        port: 80
        icon: '🌐'
        x: 20
        description: 'Layer 7: アプリケーション層'
        functions:
          - 'HTTP/HTTPS通信'
          - 'Webサービス'
      - id: 'transport'
        label: 'トランスポート'
        layer: 2
        protocol: 'TCP'
        port: 80
        icon: '🔗'
        x: 20
        description: 'Layer 4: トランスポート層'
        functions:
          - 'セグメント化'
          - '信頼性保証'
      - id: 'network'
        label: 'ネットワーク'
        layer: 1
        protocol: 'IP'
        icon: '🗺️'
        x: 20
        description: 'Layer 3: ネットワーク層'
        functions:
          - 'ルーティング'
          - 'IPアドレッシング'
      - id: 'link'
        label: 'データリンク/物理'
        layer: 0
        protocol: 'Ethernet'
        icon: '🔌'
        x: 20
        description: 'Layer 2/1: データリンク・物理層'
        functions:
          - 'フレーム送受信'
          - '物理的な信号転送'
      - id: 'server'
        label: 'Webサーバー'
        layer: 3
        protocol: 'HTTP'
        port: 80
        icon: '🖥️'
        x: 70
        description: 'サーバー側アプリケーション'
        functions:
          - 'HTTPリクエスト処理'
          - 'レスポンス生成'
    flows:
      - from: 'app'
        to: 'transport'
        label: 'HTTP Request'
        protocol: 'HTTP'
      - from: 'transport'
        to: 'network'
        label: 'TCP Segment'
        protocol: 'TCP'
      - from: 'network'
        to: 'link'
        label: 'IP Packet'
        protocol: 'IP'
      - from: 'link'
        to: 'server'
        label: 'Network Transfer'
        protocol: 'Ethernet'

# IoT Communication Stack Test - YAML駆動レイアウト制御
- component: 'interactive/DataFlowSimulator'
  props:
    title: 'IoT通信スタック - センサーデータ送信'
    mode: 'network_stack'
    showLayers: true
    protocolInfo: true
    # YAML駆動レイアウト制御
    layout:
      container:
        height: 600  # 窮屈さを解消
        width: '100%'
      layers:
        height: 90   # レイヤー高さを拡大
        spacing: 15  # レイヤー間隔を拡大
        labelWidth: 140
      nodes:
        spacing: 120  # ノード間隔を拡大
        defaultWidth: 160
        defaultHeight: 70
      protocolPanel:
        position: 'top-right'  # 右上に移動して被りを回避
        width: 300
        maxHeight: 250
        offset: { x: 10, y: 10 }
    nodes:
      - id: 'sensor_app'
        label: 'センサーアプリ'
        layer: 4
        protocol: 'MQTT'
        port: 1883
        icon: '📡'
        x: 20
        description: 'IoTアプリケーション層'
        functions:
          - 'センサーデータ収集'
          - 'JSONシリアライズ'
          - 'MQTTパブリッシュ'
      - id: 'coap'
        label: 'CoAP'
        layer: 3
        protocol: 'CoAP'
        port: 5683
        icon: '🔄'
        x: 20
        description: '軽量アプリケーション層'
        functions:
          - 'RESTful通信'
          - 'UDP上での動作'
          - '省電力通信'
      - id: 'udp'
        label: 'UDP'
        layer: 2
        protocol: 'UDP'
        port: 1883
        icon: '📦'
        x: 20
        description: 'トランスポート層'
        functions:
          - 'コネクションレス通信'
          - '高速データ転送'
          - '軽量プロトコル'
      - id: 'ipv6'
        label: 'IPv6'
        layer: 1
        protocol: '6LoWPAN'
        icon: '🌐'
        x: 20
        description: 'ネットワーク層'
        functions:
          - 'IPv6アドレッシング'
          - 'ルーティング'
          - 'パケット圧縮'
      - id: 'zigbee'
        label: 'ZigBee'
        layer: 0
        protocol: '802.15.4'
        icon: '📶'
        x: 20
        description: '無線通信層'
        functions:
          - '2.4GHz無線通信'
          - 'メッシュネットワーク'
          - '低消費電力'
      - id: 'gateway'
        label: 'IoTゲートウェイ'
        layer: 4
        protocol: 'MQTT'
        port: 1883
        icon: '🌉'
        x: 70
        description: 'プロトコル変換'
        functions:
          - 'プロトコル変換'
          - 'データ集約'
          - 'セキュリティ'
    flows:
      - from: 'sensor_app'
        to: 'coap'
        label: 'センサーデータ'
        protocol: 'MQTT'
      - from: 'coap'
        to: 'udp'
        label: 'CoAPメッセージ'
        protocol: 'CoAP'
      - from: 'udp'
        to: 'ipv6'
        label: 'UDPデータグラム'
        protocol: 'UDP'
      - from: 'ipv6'
        to: 'zigbee'
        label: 'IPv6パケット'
        protocol: '6LoWPAN'
      - from: 'zigbee'
        to: 'gateway'
        label: '無線フレーム'
        protocol: '802.15.4'

# Microservice Architecture Test  
- component: 'interactive/DataFlowSimulator'
  props:
    title: 'マイクロサービスアーキテクチャ'
    mode: 'dataflow'
    autoPlay: false
    speed: 2000
    nodes:
      - id: 'client'
        label: 'Webクライアント'
        type: 'input'
        x: 10
        y: 50
        description: 'フロントエンドアプリケーション'
      - id: 'api_gateway'
        label: 'API Gateway'
        type: 'process'
        x: 25
        y: 50
        description: 'リクエスト振り分けとロードバランシング'
      - id: 'auth_service'
        label: '認証サービス'
        type: 'process'
        x: 45
        y: 30
        description: 'JWT認証とユーザー管理'
      - id: 'user_service'
        label: 'ユーザーサービス'
        type: 'process'
        x: 45
        y: 50
        description: 'ユーザー情報管理API'
      - id: 'order_service'
        label: '注文サービス'
        type: 'process'
        x: 45
        y: 70
        description: '注文処理とビジネスロジック'
      - id: 'auth_db'
        label: '認証DB'
        type: 'output'
        x: 70
        y: 30
        description: 'ユーザー認証情報'
      - id: 'user_db'
        label: 'ユーザーDB'
        type: 'output'
        x: 70
        y: 50
        description: 'ユーザープロファイル'
      - id: 'order_db'
        label: '注文DB'
        type: 'output'
        x: 70
        y: 70
        description: '注文履歴とデータ'
      - id: 'message_queue'
        label: 'Message Queue'
        type: 'process'
        x: 60
        y: 90
        description: '非同期メッセージ処理'
    flows:
      - from: 'client'
        to: 'api_gateway'
        label: 'HTTP Request'
      - from: 'api_gateway'
        to: 'auth_service'
        label: '認証リクエスト'
      - from: 'api_gateway'
        to: 'user_service'
        label: 'ユーザー情報'
      - from: 'api_gateway'
        to: 'order_service'
        label: '注文処理'
      - from: 'auth_service'
        to: 'auth_db'
        label: '認証クエリ'
      - from: 'user_service'
        to: 'user_db'
        label: 'ユーザークエリ'
      - from: 'order_service'
        to: 'order_db'
        label: '注文クエリ'
      - from: 'order_service'
        to: 'message_queue'
        label: '非同期イベント'

#################################################
# Edge Cases and Error Handling Tests
#################################################

# Empty Data Test
- component: 'diagrams/SimpleChart'
  props:
    type: 'bar'
    title: '空データテスト'
    data: []

# Invalid Data Test  
- component: 'interactive/InteractiveFlowchart'
  props:
    title: '不正データテスト'
    steps: []
    connections: []

# Large Dataset Performance Test
- component: 'diagrams/SimpleChart'
  props:
    type: 'waveform'
    title: '大量データ波形テスト (100点)'
    width: 800
    height: 300
    timeUnit: 'ms'
    amplitude: 100
    showGrid: true
    data:
      - time: 0
        value: 0
      - time: 0.1
        value: 59
      - time: 0.2
        value: 95
      - time: 0.3
        value: 95
      - time: 0.4
        value: 59
      - time: 0.5
        value: 0
      - time: 0.6
        value: -59
      - time: 0.7
        value: -95
      - time: 0.8
        value: -95
      - time: 0.9
        value: -59
      - time: 1.0
        value: 0
      - time: 1.1
        value: 59
      - time: 1.2
        value: 95
      - time: 1.3
        value: 95
      - time: 1.4
        value: 59
      - time: 1.5
        value: 0
      - time: 1.6
        value: -59
      - time: 1.7
        value: -95
      - time: 1.8
        value: -95
      - time: 1.9
        value: -59
      - time: 2.0
        value: 0

# Summary Component
- component: 'layout/SummaryBox'
  props:
    title: '拡張コンポーネントテスト結果'
    items:
      - 'InteractiveFlowchart拡張機能: ✓ アーキテクチャモード動作確認'
      - 'InteractiveFlowchart拡張機能: ✓ ズーム・レジェンド機能確認'
      - 'InteractiveFlowchart拡張機能: ✓ バス接続種別表示確認'
      - 'Timeline拡張機能: ✓ 開発プロセスモード動作確認'
      - 'Timeline拡張機能: ✓ 依存関係表示確認'
      - 'Timeline拡張機能: ✓ フェーズ別色分け確認'
      - 'SimpleChart拡張機能: ✓ 波形表示機能動作確認'
      - 'SimpleChart拡張機能: ✓ デジタル信号表示確認'
      - 'SimpleChart拡張機能: ✓ マルチチャンネル対応確認'
      - 'DataFlowSimulator拡張機能: ✓ ネットワークスタック表示確認'
      - 'DataFlowSimulator拡張機能: ✓ OSI参照モデル動作確認'
      - 'DataFlowSimulator拡張機能: ✓ プロトコル情報表示確認'
      - 'エッジケース: ✓ 空データ・不正データ処理確認'
      - 'パフォーマンス: ✓ 大量データ処理確認'