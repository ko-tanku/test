title: "第7章: 機能拡張とカスタマイズ"
overview: "Coreでサポートされていない機能の拡張方法と、システムの高度なカスタマイズ手法を学習します。"

sections:
  - title: "カスタム図表生成の拡張"
    contents:
      - type: "text"
        text: "Core機能のChartGeneratorでは対応していない、特殊な図表生成機能を独自に実装します。"
      
      - type: "admonition"
        admonition_type: "info"
        title: "拡張機能の例"
        text: |
          - 3D可視化（matplotlib mplot3d）
          - ネットワーク図（networkx + matplotlib）
          - 統計図表（seaborn統合）
          - カスタムSVG図形生成
          - WebGL活用の高度な可視化
        collapsible: false
      
      - type: "chart"
        chart_type: "custom"
        data:
          nodes: ["マイコン", "センサー1", "センサー2", "アクチュエータ", "電源", "通信モジュール"]
          connections: [[0,1], [0,2], [0,3], [4,0], [0,5], [5,1], [5,2]]
        config:
          plot_function: "draw_network_diagram"
          title: "組み込みシステムネットワーク図"
          filename: "system_network"
        caption: "図7-1: 独自実装によるネットワーク図表示"
        width: "100%"
        height: 500

  - title: "高度なインタラクティブ要素"
    contents:
      - type: "text"
        text: "Coreの標準クイズ機能を超えた、高度なインタラクティブ要素を実装します。"
      
      - type: "html_block"
        html: |
          <div class="advanced-interactive" id="code-simulator">
              <h4>🔧 組み込みコードシミュレータ</h4>
              <p>以下のC言語コードを編集して、実行結果を予測してください：</p>
              <textarea id="code-input" rows="8" cols="60" style="font-family: monospace;">
          #include <stdio.h>
          
          int main() {
              int sensor_value = 1023;  // ADC値
              int voltage_mv;
              
              voltage_mv = (sensor_value * 3300) / 1024;
              printf("Sensor voltage: %d mV\n", voltage_mv);
              return 0;
          }
              </textarea>
              <br><br>
              <button onclick="simulateCode()" style="padding: 10px 20px; background: #2196F3; color: white; border: none; border-radius: 4px;">コード実行</button>
              <div id="output" style="margin-top: 15px; padding: 10px; background: #f5f5f5; border-radius: 4px; font-family: monospace;"></div>
              
              <script>
              function simulateCode() {
                  const code = document.getElementById('code-input').value;
                  const output = document.getElementById('output');
                  
                  // 簡単なシミュレーション（実際のC言語パーサーではありません）
                  if (code.includes('1023') && code.includes('3300') && code.includes('1024')) {
                      const result = Math.floor((1023 * 3300) / 1024);
                      output.innerHTML = `<strong>実行結果:</strong><br>Sensor voltage: ${result} mV`;
                      output.style.background = '#d4edda';
                      output.style.color = '#155724';
                  } else {
                      output.innerHTML = '<strong>コンパイルエラー:</strong><br>構文に問題があります';
                      output.style.background = '#f8d7da';
                      output.style.color = '#721c24';
                  }
              }
              </script>
          </div>

  - title: "動的コンテンツ生成"
    contents:
      - type: "text"
        text: "実行時にデータを取得し、動的にコンテンツを生成する機能を実装します。"
      
      - type: "admonition"
        admonition_type: "tip"
        title: "動的生成の活用例"
        text: |
          - 外部APIからのデータ取得
          - リアルタイムセンサーデータの表示
          - ユーザー入力に基づくカスタマイズ
          - 学習進度に応じた適応的コンテンツ
          - A/Bテストによるコンテンツ最適化
        collapsible: true
      
      - type: "html_block"
        html: |
          <div class="dynamic-content" style="border: 2px solid #9C27B0; padding: 20px; margin: 20px 0; border-radius: 12px; background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);">
              <h4>📊 リアルタイム学習統計</h4>
              <p>このページを開いた時刻: <span id="access-time"></span></p>
              <p>今日の学習セッション: <span id="session-count">1</span>回目</p>
              <p>推定学習時間: <span id="study-time">0</span>分</p>
              <button onclick="updateStats()" style="margin-top: 10px; padding: 8px 16px; background: #9C27B0; color: white; border: none; border-radius: 4px;">統計更新</button>
              
              <script>
              document.getElementById('access-time').textContent = new Date().toLocaleTimeString('ja-JP');
              
              let startTime = Date.now();
              setInterval(() => {
                  const elapsed = Math.floor((Date.now() - startTime) / 60000);
                  document.getElementById('study-time').textContent = elapsed;
              }, 60000);
              
              function updateStats() {
                  const count = parseInt(localStorage.getItem('session_count') || '0') + 1;
                  localStorage.setItem('session_count', count.toString());
                  document.getElementById('session-count').textContent = count;
                  
                  const elapsed = Math.floor((Date.now() - startTime) / 60000);
                  document.getElementById('study-time').textContent = elapsed;
              }
              </script>
          </div>

  - title: "多言語対応機能"
    contents:
      - type: "text"
        text: "国際化（i18n）対応により、複数言語での教材生成機能を実装します。"
      
      - type: "tabs"
        tabs_data:
          日本語: |
            ```yaml
            # content/i18n/ja.yml
            ui:
              quiz_check_button: "答えを確認"
              quiz_correct: "正解！"
              quiz_incorrect: "不正解"
              next_chapter: "次の章へ"
              previous_chapter: "前の章へ"
            ```
          
          英語: |
            ```yaml  
            # content/i18n/en.yml
            ui:
              quiz_check_button: "Check Answer"
              quiz_correct: "Correct!"
              quiz_incorrect: "Incorrect"
              next_chapter: "Next Chapter"
              previous_chapter: "Previous Chapter"
            ```
          
          実装: |
            ```python
            # 多言語対応の実装例
            class InternationalContentManager(BaseContentManager):
                def __init__(self, material_name, output_dir, language='ja'):
                    super().__init__(material_name, output_dir)
                    self.language = language
                    self.i18n_data = self.load_i18n_data()
                
                def get_text(self, key):
                    return self.i18n_data.get(key, key)
            ```

  - title: "プラグイン機構の実装"
    contents:
      - type: "text"
        text: "材料固有の特殊機能をプラグインとして追加・削除できる仕組みを構築します。"
      
      - type: "code_block"
        language: "python"
        code: |
          # プラグイン機構の設計例
          from abc import ABC, abstractmethod
          
          class ContentPlugin(ABC):
              """コンテンツプラグインの基底クラス"""
              
              @abstractmethod
              def get_name(self) -> str:
                  """プラグイン名を返す"""
                  pass
              
              @abstractmethod
              def process_content(self, content_data: dict) -> dict:
                  """コンテンツデータを処理する"""
                  pass
          
          class LaTeX_Plugin(ContentPlugin):
              """LaTeX数式レンダリングプラグイン"""
              
              def get_name(self) -> str:
                  return "latex_renderer"
              
              def process_content(self, content_data: dict) -> dict:
                  # LaTeX数式をSVG画像に変換
                  return self.render_latex_equations(content_data)

  - title: "アクセシビリティ機能拡張"
    contents:
      - type: "text"
        text: "視覚・聴覚・運動障害のある学習者にも配慮したアクセシブルな教材を作成します。"
      
      - type: "table"
        table_type: "basic"
        headers: ["アクセシビリティ項目", "実装内容", "対象ユーザー"]
        rows:
          - ["スクリーンリーダー対応", "適切なaria-label、alt属性の自動付与", "視覚障害者"]
          - ["キーボードナビゲーション", "Tabキー、矢印キーでの操作", "運動障害者"]
          - ["音声読み上げ", "Web Speech APIによる音声合成", "視覚障害者・ディスレクシア"]
          - ["高コントラストモード", "文字と背景の明度差を最大化", "弱視者"]
          - ["フォントサイズ調整", "ユーザー設定による拡大・縮小", "視覚障害者"]
          - ["モーション削減", "アニメーション無効化オプション", "前庭障害者"]
        title: "アクセシビリティ機能一覧"
        filename: "accessibility_features"

  - title: "学習分析とパーソナライゼーション"
    contents:
      - type: "text"
        text: "学習者の行動データを分析し、個別最適化された学習体験を提供します。"
      
      - type: "admonition"
        admonition_type: "success"
        title: "パーソナライゼーション機能"
        text: |
          - 学習時間・進度の追跡
          - 間違いやすい問題の特定
          - 個人に最適化された復習スケジュール
          - 学習スタイル（視覚的・聴覚的）の判定
          - 関心領域に基づくコンテンツ推薦
        collapsible: false
      
      - type: "chart"
        chart_type: "pie"
        data:
          learning_style: ["視覚的", "聴覚的", "体験的", "読み書き"]
          percentage: [35, 25, 30, 10]
        config:
          values_col: "percentage"
          labels_col: "learning_style"
          title: "学習スタイル分析結果"
          filename: "learning_style_analysis"
          use_plotly: true
        caption: "図7-2: 学習者の学習スタイル分布"
        width: "100%"
        height: 400

  - title: "クラウド連携とデータ同期"
    contents:
      - type: "text"
        text: "学習進度やカスタマイズ設定をクラウドに保存し、複数デバイス間で同期する機能を実装します。"
      
      - type: "html_block"
        html: |
          <div class="cloud-sync-demo" style="border: 2px solid #795548; padding: 20px; margin: 20px 0; border-radius: 12px; background: linear-gradient(135deg, #efebe9 0%, #d7ccc8 100%);">
              <h4>☁️ クラウド同期デモ</h4>
              <p>学習データの同期状態を確認できます（デモ版）：</p>
              
              <div class="sync-status" style="display: flex; justify-content: space-between; margin: 15px 0;">
                  <span>前回同期: <span id="last-sync">未同期</span></span>
                  <button onclick="syncToCloud()" id="sync-button" style="padding: 8px 16px; background: #795548; color: white; border: none; border-radius: 4px;">同期実行</button>
              </div>
              
              <div class="progress-bar" style="width: 100%; height: 20px; background: #ddd; border-radius: 10px; overflow: hidden;">
                  <div id="sync-progress" style="width: 0%; height: 100%; background: #4CAF50; transition: width 0.3s;"></div>
              </div>
              <p id="sync-message" style="margin-top: 10px; font-style: italic; color: #666;"></p>
              
              <script>
              function syncToCloud() {
                  const button = document.getElementById('sync-button');
                  const progress = document.getElementById('sync-progress');
                  const message = document.getElementById('sync-message');
                  
                  button.disabled = true;
                  button.textContent = '同期中...';
                  message.textContent = '学習データをアップロード中...';
                  
                  // プログレスバーアニメーション
                  let width = 0;
                  const interval = setInterval(() => {
                      width += 10;
                      progress.style.width = width + '%';
                      
                      if (width >= 100) {
                          clearInterval(interval);
                          document.getElementById('last-sync').textContent = new Date().toLocaleTimeString('ja-JP');
                          button.disabled = false;
                          button.textContent = '同期実行';
                          message.textContent = '同期完了！すべてのデバイスで最新の学習状態が利用できます。';
                          setTimeout(() => {
                              progress.style.width = '0%';
                              message.textContent = '';
                          }, 3000);
                      }
                  }, 200);
              }
              </script>
          </div>

  - title: "機能拡張の統合とテスト"
    contents:
      - type: "text"
        text: "実装した拡張機能をCore機能と統合し、全体的な動作テストを実施します。"
      
      - type: "admonition"
        admonition_type: "warning"
        title: "統合テストのチェックポイント"
        text: |
          - Core機能との競合がないか
          - パフォーマンスへの影響は許容範囲内か
          - エラーハンドリングは適切か
          - ドキュメントとコードの整合性
          - ブラウザ互換性の確認
          - セキュリティ脆弱性の有無
        collapsible: true
      
      - type: "summary"
        title: "第7章で習得した拡張技法"
        points:
          - "カスタム図表生成による可視化の高度化"
          - "インタラクティブ要素の独自実装"
          - "動的コンテンツ生成によるリアルタイム性向上"
          - "多言語対応による国際化"
          - "プラグイン機構による機能の拡張性確保"
          - "アクセシビリティ配慮によるインクルーシブ設計"
          - "学習分析とパーソナライゼーション"
          - "クラウド連携による利便性向上"