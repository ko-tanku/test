title: "第6章: Core機能完全テスト"
overview: "Coreフレームワークで実装されているが、これまでテストされていない機能を網羅的に検証します。"

sections:
  - title: "AssetGenerator完全テスト"
    contents:
      - type: "text"
        text: "AssetGeneratorのテンプレート機能、変数置換、アセット更新機能を包括的にテストします。"
      
      - type: "admonition"
        admonition_type: "info"
        title: "テスト対象機能"
        text: |
          - カスタムテンプレートの作成と管理
          - 複数テーマCSS生成（デフォルト、ダーク、高コントラスト）
          - JavaScript機能の統合
          - アセットマニフェスト出力
          - ファイル更新とバージョン管理
        collapsible: false

      - type: "code_block"
        language: "python"
        code: |
          # AssetGeneratorの高度な使用例
          from src.core.asset_generator import AssetGenerator, AssetType
          
          # カスタムテンプレートの作成
          asset_gen = AssetGenerator(docs_dir)
          asset_gen.create_custom_template(
              AssetType.CSS,
              'advanced_theme',
              template_content,
              variables={'theme_color': '#1976D2'}
          )
          
          # 複数バリエーションの生成
          themes = {'light': {}, 'dark': {'bg': '#1a1a1a'}}
          for name, vars in themes.items():
              asset_gen.generate_asset(
                  AssetType.CSS,
                  'advanced_theme',
                  f'theme_{name}.css',
                  variables=vars
              )

  - title: "MkDocsManager高度機能テスト"
    contents:
      - type: "text"
        text: "MkDocsManagerの設定検証、バックアップ、ナビゲーション自動生成機能をテストします。"
      
      - type: "table"
        table_type: "basic"
        headers: ["機能", "テスト項目", "期待結果"]
        rows:
          - ["設定検証", "不正なプラグイン設定", "エラー検出と詳細レポート"]
          - ["自動バックアップ", "既存mkdocs.yml", "タイムスタンプ付きバックアップ"]
          - ["ナビゲーション生成", "複雑な階層構造", "正しいYAML構造で出力"]
          - ["アセット統合", "CSS/JS自動追加", "extra_css/jsに正しく反映"]
        title: "MkDocsManager機能テスト一覧"
        filename: "mkdocs_manager_test"

  - title: "KnowledgeManager統合テスト"
    contents:
      - type: "text_with_tooltips"
        text: "KnowledgeManagerによる専門用語管理を確認します。DocumentBuilder、ChartGenerator、TableGeneratorとの連携も検証対象です。"
        terms:
          DocumentBuilder: "Markdownコンテンツを構築するためのビルダークラス"
          ChartGenerator: "matplotlib、plotlyを使用して図表を生成するクラス"
          TableGenerator: "HTMLテーブルを生成し、カスタムスタイルを適用するクラス"
      
      - type: "admonition"
        admonition_type: "tip"
        title: "用語管理の自動化"
        text: "専門用語はYAMLファイルで一元管理され、自動的にツールチップとして各章で利用できます。関連用語の横断参照も自動生成されます。"
        collapsible: true

  - title: "DocumentBuilder拡張機能テスト"
    contents:
      - type: "text"
        text: "DocumentBuilderの各種要素生成機能を網羅的にテストします。"
      
      - type: "tabs"
        tabs_data:
          基本要素: |
            - 見出し（レベル1-6）
            - 段落とツールチップ付き段落
            - リスト（順序付き・順序なし）
            - 水平線とブロック引用
          
          高度要素: |
            - アドモニション（複数タイプ）
            - タブ機能
            - コードブロックと実行結果表示
            - HTML直接埋め込み
          
          インタラクティブ: |
            - 各種クイズ機能
            - 図表埋め込み
            - 表埋め込み
            - アニメーション要素

  - title: "BaseContentManager継承テスト"
    contents:
      - type: "text"
        text: "BaseContentManagerの継承により、どのように効率的にコンテンツ管理クラスを実装できるかを検証します。"
      
      - type: "admonition"
        admonition_type: "success"
        title: "継承によるメリット"
        text: |
          - 各種ジェネレータの自動初期化
          - YAML読み込み機能の提供
          - Jinja2テンプレート環境の構築
          - エラーハンドリングの標準化
          - ログ出力の統一
        collapsible: false

  - title: "設定ファイル統合管理テスト"
    contents:
      - type: "text"
        text: "複数の設定ファイル（config.yml、各chapterX.yml）の統合管理機能をテストします。"
      
      - type: "chart"
        chart_type: "custom"
        data: null
        config:
          plot_function: "draw_config_flow_diagram"
          title: "設定ファイル処理フロー"
          filename: "config_flow_diagram"
        caption: "図6-1: 設定ファイルの読み込みと統合処理の流れ"
        width: "100%"
        height: 400

  - title: "テンプレート外部化テスト"
    contents:
      - type: "text"
        text: "templates/ディレクトリからのJinjaテンプレート読み込み機能をテストします。"
      
      - type: "code_block"
        language: "jinja2"
        code: |
          {# custom.css.jinja テンプレート例 #}
          :root {
              --primary-color: {{ primary_color | default('#1976D2') }};
              --secondary-color: {{ secondary_color | default('#FFC107') }};
          }
          
          {% if theme == 'dark' %}
          body {
              background-color: #1a1a1a;
              color: #e0e0e0;
          }
          {% endif %}

  - title: "エラーハンドリング・ログ出力テスト"
    contents:
      - type: "text"
        text: "Core機能のエラーハンドリングとログ出力機能の動作を確認します。"
      
      - type: "admonition"
        admonition_type: "warning"
        title: "テスト項目"
        text: |
          - 不正なYAMLファイルに対するエラーハンドリング
          - 存在しないテンプレートファイルへのアクセス
          - 設定項目の不整合検出
          - ファイル権限エラーの処理
          - 詳細なログ出力による問題箇所の特定
        collapsible: true

  - title: "パフォーマンステスト"
    contents:
      - type: "text"
        text: "大量のコンテンツ生成時のCore機能のパフォーマンスを測定します。"
      
      - type: "chart"
        chart_type: "line"
        data:
          chapters: [1, 5, 10, 20, 50]
          generation_time: [0.5, 2.1, 4.3, 8.7, 21.2]
        config:
          x_col: "chapters"
          y_col: "generation_time"
          title: "章数と生成時間の関係"
          xlabel: "章数"
          ylabel: "生成時間（秒）"
          filename: "performance_test"
          use_plotly: true
        caption: "図6-2: Core機能のスケーラビリティ検証"
        width: "100%"
        height: 450