# 学習のヒント（TIPS）
# IT・組み込み技術テーマ

tip_items:
  - title: "割り込み処理は短く"
    content: "割り込みサービスルーチン（ISR）内では最小限の処理のみ行い、時間のかかる処理はメインループに委譲しましょう。"
    category: "プログラミング"

  - title: "volatile修飾子の重要性"
    content: "割り込みやハードウェアレジスタにアクセスする変数には必ずvolatile修飾子を付けて、コンパイラの最適化を防ぎましょう。"
    category: "プログラミング"

  - title: "ウォッチドッグタイマーの活用"
    content: "システムの暴走を防ぐため、ウォッチドッグタイマーを設定し、定期的にリセットすることで信頼性を向上させます。"
    category: "信頼性"

  - title: "メモリマップを理解する"
    content: "使用するマイコンのメモリマップ（ROM、RAM、レジスタの配置）を理解することで、効率的なプログラミングが可能になります。"
    category: "システム理解"

  - title: "オシロスコープは必須ツール"
    content: "デジタル信号の波形を確認できるオシロスコープは、組み込み開発には欠かせません。タイミング問題の解析に威力を発揮します。"
    category: "開発ツール"

  - title: "状態遷移図を描く"
    content: "複雑な制御ロジックは、まず状態遷移図を描いてから実装すると、バグが減り保守性も向上します。"
    category: "設計手法"

  - title: "効果的なツールチップの活用"
    content: "専門用語の上にマウスを置くと詳細な説明が表示されます。理解が曖昧な用語があれば積極的に活用しましょう。"
    category: "学習方法"

  - title: "アニメーション図表の見方"
    content: "アニメーションは一時停止できませんが、繰り返し表示されるので、じっくり観察して現象を理解しましょう。"
    category: "学習方法"

  - title: "インタラクティブ図表の操作"
    content: "ボタンやドロップダウンを操作して、異なるデータや状態を比較してみましょう。能動的な操作が理解を深めます。"
    category: "学習方法"

  # Core機能・拡張に関するTIPSを追加
  - title: "Core機能の活用でコード重複を削減"
    content: "DocumentBuilder、ChartGenerator等のCore機能を積極的に活用することで、材料間でのコード重複を避け、保守性を大幅に向上させられます。"
    category: "開発効率"

  - title: "YAMLファイルでデータとロジックを分離"
    content: "設定値やコンテンツデータをYAMLファイルに外部化することで、Pythonコードを変更することなく内容を更新でき、エラーリスクも削減されます。"
    category: "アーキテクチャ"

  - title: "テンプレートファイルの外部化"
    content: "CSS/JSテンプレートを独立ファイルとして管理することで、シンタックスハイライトやコード補完が効き、開発効率が向上します。"
    category: "開発効率"

  - title: "段階的な機能拡張"
    content: "Core機能でサポートされていない機能は、まずmaterials側で実装・検証し、汎用性が確認できればCore側への移行を検討しましょう。"
    category: "開発戦略"

  - title: "ログ出力による動作確認"
    content: "教材生成プロセスでは、適切なログ出力により各ステップの成功・失敗を確認できます。デバッグ時に非常に有効です。"
    category: "デバッグ"

  - title: "バックアップの重要性"
    content: "mkdocs.ymlの自動生成機能は既存ファイルを自動的にバックアップします。手動での変更を行う際も、事前のバックアップを心がけましょう。"
    category: "リスク管理"

  - title: "設定ファイルの検証機能"
    content: "MkDocsManagerの設定検証機能を活用して、生成されたmkdocs.ymlに問題がないか定期的にチェックしましょう。"
    category: "品質保証"

  - title: "アセットマニフェストの活用"
    content: "生成されたCSS/JSファイルの管理には、AssetGeneratorが出力するマニフェストファイルを活用し、ファイルの重複や不整合を防ぎましょう。"
    category: "ファイル管理"

  - title: "継承による機能拡張"
    content: "BaseContentManagerを継承することで、Core機能の恩恵を受けつつ、材料固有の機能を効率的に実装できます。"
    category: "オブジェクト指向"

  - title: "インタラクティブ要素のテスト"
    content: "クイズ機能やドラッグ&ドロップ機能は、複数のブラウザで動作確認を行い、一貫したユーザー体験を提供しましょう。"
    category: "品質保証"