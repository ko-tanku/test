import logging
from pathlib import Path
from typing import List, Dict, Any

from src.core.content_manager import BaseContentManager
from src.core.knowledge_manager import Term, FaqItem, TipItem
from src.materials.test_material.generators import ascii_art_generator

logger = logging.getLogger(__name__)

class TestMaterialContentManager(BaseContentManager):
    """
    test_materialのコンテンツ生成を統括するクラス。
    coreの全機能のテストを目的とする。
    """

    def __init__(self, output_base_dir: Path):
        super().__init__("test_material", output_base_dir)
        # この教材固有のジェネレータを登録
        self.custom_generators = {
            "ascii_art_generator.generate": ascii_art_generator.generate
        }

    def generate_content(self) -> List[Path]:
        """
        教材全体のコンテンツを生成するメインメソッド。
        """
        logger.info(f"'{self.material_name}'のコンテンツ生成を開始します。")
        generated_files = []

        # ナレッジページの生成
        self._register_knowledge_from_yaml()
        generated_files.append(self.generate_glossary())
        generated_files.append(self.generate_faq_page())
        generated_files.append(self.generate_tips_page())

        # 各章のコンテンツを生成
        for i in range(1, 7):
            chapter_filename = f"chapter{i}.yml"
            chapter_data = self.load_chapter_from_yaml(chapter_filename)
            if not chapter_data:
                continue

            # 出力先ディレクトリを決定
            docs_dir = self.output_base_dir / self.material_name / "documents"
            charts_dir = self.output_base_dir / self.material_name / "charts"
            tables_dir = self.output_base_dir / self.material_name / "tables"
            
            # 章データからMarkdownを生成
            output_md_path = self._generate_chapter_from_data(
                chapter_data,
                docs_dir / f"chapter{i:02d}.md",
                charts_dir,
                tables_dir
            )
            generated_files.append(output_md_path)

        logger.info(f"'{self.material_name}'のコンテンツ生成が完了しました。")
        return generated_files

    def _register_knowledge_from_yaml(self):
        """
        terms.ymlから用語、FAQ、TIPSを読み込んでKnowledgeManagerに登録する。
        """
        knowledge_data = self.load_chapter_from_yaml("terms.yml")
        if not knowledge_data:
            return
        
        # YAMLから読み込んだ辞書のリストを、データクラスオブジェクトのリストに変換
        terms_list = [Term(**data) for data in knowledge_data.get("terms", [])]
        faq_list = [FaqItem(**data) for data in knowledge_data.get("faq", [])]
        tips_list = [TipItem(**data) for data in knowledge_data.get("tips", [])]

        self.knowledge_mgr.register_terms_batch(terms_list)
        self.knowledge_mgr.register_faq_batch(faq_list)
        self.knowledge_mgr.register_tips_batch(tips_list)

    def _process_content_list(self, contents: List[Dict[str, Any]], charts_dir: Path, tables_dir: Path):
        """
        コンテンツリストの処理をオーバーライドし、カスタムジェネレータに対応する。
        """
        # 親クラスのメソッドはリストを期待するため、ループで個別に処理
        for item in contents:
            if item.get('type') == 'custom_generator':
                # charts_dirをアセット用の共通ディレクトリとして流用
                self._process_custom_generator(item, charts_dir)
            else:
                # 親クラスの標準的な処理に任せる
                super()._process_content_list([item], charts_dir, tables_dir)

    def _process_custom_generator(self, item: Dict[str, Any], assets_dir: Path):
        """
        YAMLで定義されたカスタムジェネレータを実行する。
        """
        generator_key = item.get("generator")
        params = item.get("params", {})

        if not generator_key or generator_key not in self.custom_generators:
            logger.warning(f"未定義のカスタムジェネレータ: {generator_key}")
            return

        generator_func = self.custom_generators[generator_key]
        
        try:
            # 独自ジェネレータ関数を実行
            generated_asset_path = generator_func(assets_dir, **params)

            # 生成されたアセットを画像としてページに埋め込む
            relative_path = Path("..") / assets_dir.name / generated_asset_path.name
            self.doc_builder.add_image_reference(
                alt_text=f"Generated by {generator_key}",
                image_path=relative_path
            )
        except Exception as e:
            logger.error(f"カスタムジェネレータ '{generator_key}' の実行中にエラー: {e}")
